{"version":3,"sources":["GetNft.js","components/Modal.js","logo.svg","components/background1.png","PhantomWallet.js","images/degen.png","App.js","index.js"],"names":["require","struct","nu64","u32","ns64","u8","nu64be","baseURL","GetNft","useConnection","connection","useWallet","publicKey","sendTransaction","useState","setData","images","setImages","setShowData","message","setMessage","setLoader","stakedNft","setStakedNft","imgLoader","setImageLoader","imgLoader2","setImageLoader2","useEffect","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","checkNFTs","console","log","a","connect","createConnectionConfig","web3","ownerToken","result","isValidSolanaAddress","getParsedNftAccountsByOwner","publicAddress","serialization","nfts","cmId","filter","obj","data","creators","address","filtered","imageData","Promise","all","map","fetch","uri","response","json","push","name","mint","src","image","setTimeout","stakeApi","walletKey","nftKey","url","axios","post","wallet","nftAddress","headers","then","getStakeData","handleClose","catch","err","stake","nft","handleShow","split","arr","value","parseInt","WalletNotConnectedError","program_id","nftPubkey","rent","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM","CANDY_MACHINE_ID","findProgramAddress","Buffer","from","toBuffer","metadata","vault_enc","TextEncoder","encode","vault_pda","raw_stake_data","stake_data","source","destanation","Metadata","getPDA","metadataPDA","load","tokenMetadata","wl_data_address","keys","pubkey","isSigner","isWritable","programId","allocateTransaction","Transaction","feePayer","biscuit","toString","commandDataLayout","alloc","encodeLength","instruction","slice","add","signature","confirmTransaction","error","unstakeApi","delete","get","unstake","reward_mint","reward_source","reward_destanation","show","setShow","string","style","justifyContent","display","className","length","i","xs","sm","md","lg","xl","paddingRight","marginBottom","alignItems","animation","variant","height","width","onLoad","color","onClick","disabled","borderRadius","marginTop","Modal1","props","onHide","dialogClassName","centered","Body","backgroundColor","PhantomWallet","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","margin","fontSize","lineHeight","warning","marginLeft","App","newestOnTop","rtl","pauseOnFocusLoss","theme","textAlign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba24731d.chunk.js","sourcesContent":["/** @format */\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { Keypair, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport * as web3 from \"@solana/web3.js\";\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Metadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport React, { FC, useCallback, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n\tgetParsedNftAccountsByOwner,\n\tisValidSolanaAddress,\n\tcreateConnectionConfig,\n} from \"@nfteyez/sol-rayz\";\nimport {\n\tContainer,\n\tProgressBar,\n\tRow,\n\tCol,\n\tModal,\n\tImage,\n\tSpinner,\n\n} from \"react-bootstrap\";\nimport axios from \"axios\";\n// import moment from react-moment;\nimport moment from \"moment\";\nimport Calculation from \"./components/Calculation\";\nimport Modal1 from \"./components/Modal\";\n\nconst {\n\tstruct,\n\tu32,\n\tns64,\n\tnu64,\n\tnu64be,\n\tu8,\n} = require(\"@solana/buffer-layout\");\n// const baseURL = \"http://localhost:3000\";\nconst baseURL = \"https://sacred-amulets.herokuapp.com\";\n// const baseURL = \"https://api.richmonkey-island.com\";\n\n\nexport const GetNft = () => {\n\tconst { connection } = useConnection();\n\tconst { publicKey, sendTransaction } = useWallet();\n\tconst [tokens, setTokens] = useState(5000);\n\tconst [data, setData] = useState([]);\n\tconst [images, setImages] = useState([]);\n\tconst [showData, setShowData] = useState(false);\n\tconst [message, setMessage] = useState(\"\");\n\tconst [loader, setLoader] = useState(false);\n\tconst [stakedNft, setStakedNft] = useState();\n\tconst [imgLoader, setImageLoader]=useState(false);\n\tconst [imgLoader2, setImageLoader2]=useState(false);\n\n\tuseEffect(() => {\n\t\tif (publicKey) {\n\t\t\ttoast.success(\"Connected\", {\n\t\t\t\tposition: \"bottom-left\",\n\t\t\t\tautoClose: 5000,\n\t\t\t\thideProgressBar: false,\n\t\t\t\tcloseOnClick: true,\n\t\t\t\tpauseOnHover: true,\n\t\t\t\tdraggable: true,\n\t\t\t\tprogress: undefined,\n\t\t\t});\n\t\t\tcheckNFTs();\n\t\t\tsetImageLoader2(true)\n\n\n\t\t}\n\t}, [publicKey]);\n\tconsole.log(publicKey, \"publicKey\");\n\n\tconst checkNFTs = async () => {\n\t\tsetMessage(\"Fetching NFTs....\");\n\t\tconst connect =    createConnectionConfig(web3.clusterApiUrl(\"devnet\"));\n\t\t// const connect = createConnectionConfig(web3.clusterApiUrl(\"mainnet-beta\"));\n\t\t// const provider = getProvider();\n\t\tlet ownerToken = publicKey;\n\t\t// let ownerToken = \"7VPjjEj7mukgBf9TqpDxivnu7BNH4rdUmSFUpgvpLvf7\";\n\t\tconst result = isValidSolanaAddress(ownerToken);\n\t\tconsole.log(\"result\", result);\n\n\t\tconst nfts = await getParsedNftAccountsByOwner({\n\t\t\tpublicAddress: publicKey,\n\t\t\t// publicAddress: \"7VPjjEj7mukgBf9TqpDxivnu7BNH4rdUmSFUpgvpLvf7\",\n\t\t\tconnection: connect,\n\t\t\tserialization: true,\n\t\t});\n\t\tconsole.log(nfts, \"nfts\");\n\t\tsetData(nfts);\n\t\t// get specific CM nft's by just changing cmId\n\t\t// let cmId = \"5dRqRddNxD3tTuuRVVaSWYCErJHSvtZNnm2qtoGxwkYq\";\n\t\t// let cmId = \"AV22NPCEjGPy7VQwDgLbmThWtt8LfQusqN37neqYGNj3\";\n\t\t// let cmId = \"5k2EPeEp4ZZaRKdW7uDvTxwoRgYkatk15LEhRPYXhaxD\";\n\t\tlet cmId = \"2YjQta5fdwFushuo6KLsjcYABqoyt22UYe4btRWPUhWW\";\n\t\t//mainnet cmid start\n\t\t// let cmId = \"2eSLBEzyJpPVUkBHCQeodFZtRPE9S6tRrAXhGnmxNM48\";\n\t\t//mainnet cmid end\n\n\t\tconsole.log(\n\t\t\tnfts.filter((obj) => obj.data.creators[0].address === cmId),\n\t\t\t\"specific CM nft's\"\n\t\t);\n\t\tlet filtered = nfts.filter((obj) => obj.data.creators[0].address === cmId);\n\t\tlet imageData = [];\n\n\t\tawait Promise.all(\n\t\t\tfiltered.map(async (obj) => {\n\t\t\t\tconst response = await fetch(obj.data.uri);\n\t\t\t\tconst result = await response.json();\n\t\t\t\timageData.push({\n\t\t\t\t\tname: obj.data.name,\n\t\t\t\t\tmint: obj.mint,\n\t\t\t\t\tsrc: result.image,\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t\t// get all nfts of wallet\n\t\t// let imageData = []\n\t\t//   nfts.map(async (obj) => {const response = await fetch(obj.data.uri); const result = await response.json(); imageData.push({name: obj.data.name, src: result.image});});\n\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(imageData, \"imageResult\");\n\t\t\tsetImages(imageData);\n\t\t\tsetShowData(true);\n\t\t\tsetMessage(\"\");\n\t\t}, 5000);\n\t\t// return nfts;\n\t};\n\n\t// var i = 0;\n\t// const move = () => {\n\t// \tif (i == 0) {\n\t// \t\ti = 1;\n\t// \t\tvar elem = document.getElementById(\"myBar\");\n\t// \t\tvar width = 1;\n\t// \t\tvar id = setInterval(frame, 100);\n\t// \t\tfunction frame() {\n\t// \t\t\tif (width >= 100) {\n\t// \t\t\t\tclearInterval(id);\n\t// \t\t\t\ti = 0;\n\t// \t\t\t} else {\n\t// \t\t\t\twidth++;\n\t// \t\t\t\telem.style.width = width + \"%\";\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// };\n\n\tconst stakeApi = async (walletKey, nftKey, url, name) => {\n\t\taxios\n\t\t\t.post(\n\t\t\t\t`${baseURL}/stake`,\n\t\t\t\t{ wallet: walletKey, nftAddress: nftKey, url, name },\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\t\"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\",\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(\"Response: \", response);\n\t\t\t\tgetStakeData(walletKey);\n\t\t\t\thandleClose();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(\"Error:\", err);\n\t\t\t\thandleClose();\n\t\t\t});\n\t};\n\n\tconst stake = async (nft, publicKey, sendTransaction, url, name) => {\n\t\thandleShow();\n\t\tsetLoader(true);\n\t\tconsole.log(\"Check\");\n\t\tconsole.log(nft, \"nft\");\n\t\tconsole.log(publicKey, \"publicKey\");\n\t\tconsole.log(sendTransaction, \"sendTransaction\");\n\t\tconsole.log(name,\"name of nft\");\n\t\tconsole.log(name.split(\"#\"), \"after trim\")\n\t\tconst arr=name.split(\"#\");\n\t\tvar value=parseInt(arr[1]);\n\t\tconsole.log(value,\"value\");\n\t\tif(value>6){\n\t\t\tvalue=6;\n\t\t}\n\t\tconsole.log(value,\"value2\");\n\n\n\t\tif (!publicKey) throw new WalletNotConnectedError();\n\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"ECoegv7FCc7yjCJ131PN3vFUbz1eJ5UdHS3RLNtvL8vz\"\n\t\t// );\n\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"E8iVZ3venXrXUqTXQSEwKGbE2hX5tAWBmKDoMKo3Y4i1\"\n\t\t// );\n\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"4ayF4YuQMVTCavci2w7ZvK51ZmbVz6vKPWKqJ1DSiQkB\"\n\t\t// );\n\t\tlet program_id = new web3.PublicKey(\n\t\t\t\"4hWcRRDdVEFmCLsum7ByxckX1LqgNF1AsU1MLaac9qxN\"\n\t\t);\n\t\t//mainnet\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"Bh27em4eRG9GHmvigC6PZ6S1wM7vWRS7JGvP2Zk7pLsF\"\n\t\t// );\n\t\tlet nftPubkey = new web3.PublicKey(nft);\n\t\t// .then((check) => {\n\t\t// \tconsole.log(\"check:\", check);\n\t\t// })\n\t\t// .catch((error) => {\n\t\t// \tconsole.log(\"check:\", error);\n\t\t// });\n\t\t// console.log(\"nftPubkey: \", nftPubkey.isOnCurve());\n\t\t// console.log(\"nftPubkey: \", nftPubkey);\n\n\t\tlet rent = new web3.PublicKey(\n\t\t\t\"SysvarRent111111111111111111111111111111111\"\n\t\t);\n\n\t\tlet TOKEN_PROGRAM_ID = new web3.PublicKey(\n\t\t\t\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n\t\t);\n\n\t\tlet SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n\t\t\t\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n\t\t);\n\n\t\tconst TOKEN_METADATA_PROGRAM = new web3.PublicKey(\n\t\t\t\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n\t\t); // Added new\n\t\tconst CANDY_MACHINE_V2_PROGRAM = new web3.PublicKey(\n\t\t\t\"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n\t\t); //Added new\n\n\t\t// const CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t// \t\"5dRqRddNxD3tTuuRVVaSWYCErJHSvtZNnm2qtoGxwkYq\"\n\t\t// );\n\t\t// const CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t// \t\"5k2EPeEp4ZZaRKdW7uDvTxwoRgYkatk15LEhRPYXhaxD\"\n\t\t// );\n\t\tconst CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t\t\"2YjQta5fdwFushuo6KLsjcYABqoyt22UYe4btRWPUhWW\"\n\t\t);\n\t\t//mainnet\n\t\t// const CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t// \t\"2eSLBEzyJpPVUkBHCQeodFZtRPE9S6tRrAXhGnmxNM48\"\n\t\t// );\n\t\t\n\t\tlet connection = new web3.Connection(\n\t\t\tweb3.clusterApiUrl(\"devnet\"),\n\t\t\t// web3.clusterApiUrl(\"mainnet-beta\"),\n\t\t\t\"confirmed\"\n\t\t);\n\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"D2D6M8p5TGe2PphL7VacmVwbTGNyr22GAZ4qcqTFVn46\"\n\t\t// );\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"9SWHSxRbexQDjNgCgh5GEeyESv2vCAWo2sZf45xHr18h\"\n\t\t// );\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"C44md6V2ixneLTfnZMcNnFrYL3oFhgVhmjTCc1dwyzf7\"\n\t\t// );\n\t\tlet reward_mint = new web3.PublicKey(\n\t\t\t\"EdiXRce7Fsu4WDAMkTdntUQodf3qqEnwDUbvVW6FQAEM\"\n\t\t);\n\t\t//mainnet\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"7eDhcd5zo6Dg3LAdezLvGMYE9xHWTzr2ayKzAhQp8DHy\"\n\t\t// );\n\n\t\t// var metadata_enc = new TextEncoder().encode(\"metadata\"); //Added new\n\t\tlet metadata = await web3.PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(\"metadata\"),\n\t\t\t\tTOKEN_METADATA_PROGRAM.toBuffer(),\n\t\t\t\tnftPubkey.toBuffer(),\n\t\t\t],\n\t\t\tTOKEN_METADATA_PROGRAM\n\t\t); //Added new\n\t\tmetadata = metadata[0];\n\t\t// let metadata_data = await connection.getAccountInfo(metadata);\n\n\t\tvar vault_enc = new TextEncoder().encode(\"vault\");\n\t\tlet vault_pda = await web3.PublicKey.findProgramAddress(\n\t\t\t[vault_enc],\n\t\t\tprogram_id\n\t\t);\n\t\t// console.log(\"vault_pda: \", vault_pda);\n\t\tvault_pda = vault_pda[0]; //IMPORTANT\n\t\tlet raw_stake_data = await web3.PublicKey.findProgramAddress(\n\t\t\t[nftPubkey.toBuffer()],\n\t\t\tprogram_id\n\t\t);\n\t\t// console.log(\"raw_stake_data: \", raw_stake_data.toString());\n\t\tlet stake_data = raw_stake_data[0];\n\n\t\tlet source = (\n\t\t\tawait web3.PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tpublicKey.toBuffer(),\n\t\t\t\t\tTOKEN_PROGRAM_ID.toBuffer(),\n\t\t\t\t\tnftPubkey.toBuffer(),\n\t\t\t\t],\n\t\t\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t\t\t)\n\t\t)[0]; //Done\n\t\tlet destanation = (\n\t\t\tawait web3.PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tvault_pda.toBuffer(),\n\t\t\t\t\tTOKEN_PROGRAM_ID.toBuffer(),\n\t\t\t\t\tnftPubkey.toBuffer(),\n\t\t\t\t],\n\t\t\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t\t\t)\n\t\t)[0]; //Done\n\t\tlet metadataPDA = await Metadata.getPDA(new web3.PublicKey(nftPubkey));\n\t\tlet tokenMetadata = await Metadata.load(connection, metadataPDA);\n\t\tconsole.log(\"tokenMetadata\", tokenMetadata);\n\n\t\tlet wl_data_address = await web3.PublicKey.findProgramAddress(\n\t\t\t[Buffer.from(\"whitelist\"), CANDY_MACHINE_ID.toBuffer()],\n\t\t\tprogram_id\n\t\t);\n\t\twl_data_address = wl_data_address[0];\n\t\t// console.log(\"Publickey: \", publicKey.toString());\n\t\t// console.log(\"NFTpubkey: \", nftPubkey.toString());\n\t\t// console.log(\"Metadata: \", metadata.toString());\n\t\t// console.log(\"metadata_data: \", metadata_data.toString());\n\t\t// console.log(\"vault_pda: \", vault_pda.toString());\n\t\t// console.log(\"source: \", source.toString());\n\t\t// console.log(\"destanation: \", destanation.toString());\n\t\t// console.log(\"stake_data: \", stake_data.toString());\n\t\t// console.log(\"wl_data_address: \", wl_data_address.toString());\n\n\t\tlet keys = [\n\t\t\t{ pubkey: publicKey, isSigner: true, isWritable: true }, //Done\n\t\t\t{ pubkey: nftPubkey, isSigner: false, isWritable: false }, //Done\n\t\t\t{ pubkey: metadata, isSigner: false, isWritable: false }, //Done\n\t\t\t{ pubkey: vault_pda, isSigner: false, isWritable: false }, //Done\n\t\t\t{ pubkey: source, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: destanation, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }, //Done\n\t\t\t{\n\t\t\t\tpubkey: web3.SystemProgram.programId,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t}, //Done\n\t\t\t{ pubkey: rent, isSigner: false, isWritable: false }, //Done\n\t\t\t{\n\t\t\t\tpubkey: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t},\n\t\t\t{ pubkey: stake_data, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: wl_data_address, isSigner: false, isWritable: true }, //Done\n\t\t];\n\n\t\tlet allocateTransaction = new Transaction({\n\t\t\tfeePayer: publicKey,\n\t\t});\n\n\t\t// let  biscuit = \"6.0000000\";\n\t\tlet  biscuit=value.toString();\n\t\tconst commandDataLayout = struct([\n\t\t\tu8(\"instruction\"),\n\t\t\t// nu64(\"nft\"),\n\t\t\tnu64(\"biscuit\")\n\t\t\t// nu64(\"lock_period\"),\n\t\t]);\n\n\n\t\tlet data = Buffer.alloc(1024);\n\t\t{\n\t\t\tconst encodeLength = commandDataLayout.encode(\n\t\t\t\t{\n\t\t\t\t\tinstruction: 1,\n\t\t\t\t\t// nftPubkey,\n\t\t\t\t\tbiscuit,\n\t\t\t\t\t\n\t\t\t\t\t// lock_period,\n\t\t\t\t},\n\t\t\t\tdata\n\t\t\t);\n\t\t\tdata = data.slice(0, encodeLength);\n\t\t}\n\n\t\tallocateTransaction.add(\n\t\t\tnew web3.TransactionInstruction({\n\t\t\t\tkeys,\n\t\t\t\tprogramId: program_id,\n\t\t\t\tdata,\n\t\t\t})\n\t\t);\n\n\t\ttry {\n\t\t\tconst signature = await sendTransaction(allocateTransaction, connection);\n\n\t\t\tconst result = await connection.confirmTransaction(\n\t\t\t\tsignature,\n\t\t\t\t\"processed\"\n\t\t\t);\n\t\t\t// move();\n\n\t\t\tif (result.value.err) {\n\t\t\t\tsetLoader(false);\n\n\t\t\t\tconsole.log(\"STAKING\", result.value.err);\n\t\t\t\ttoast.error(`Error! ${result.value.err}`, {\n\t\t\t\t\tposition: \"bottom-left\",\n\t\t\t\t\tautoClose: 5000,\n\t\t\t\t\thideProgressBar: false,\n\t\t\t\t\tcloseOnClick: true,\n\t\t\t\t\tpauseOnHover: true,\n\t\t\t\t\tdraggable: true,\n\t\t\t\t\tprogress: undefined,\n\t\t\t\t}\n\t\t\t\t);\n\t\t\t\thandleClose();\n\n\t\t\t} else {\n\t\t\t\tstakeApi(publicKey.toString(), nft, url, name);\n\t\t\t\tconsole.log(\"transaction confirmed STAKING\", signature);\n\t\t\t\tsetLoader(false);\n\t\t\t\tcheckNFTs();\n\t\t\t\ttoast.success(\"Success! Staked Successfully.\", {\n\t\t\t\t\tposition: \"bottom-left\",\n\t\t\t\t\tautoClose: 5000,\n\t\t\t\t\thideProgressBar: false,\n\t\t\t\t\tcloseOnClick: true,\n\t\t\t\t\tpauseOnHover: true,\n\t\t\t\t\tdraggable: true,\n\t\t\t\t\tprogress: undefined,\n\t\t\t\t});\n\t\t\t\thandleClose();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(\"error STAKING:\", e);\n\t\t\tsetLoader(false);\n\t\t\ttoast.error(`Error! ${e}`, {\n\t\t\t\tposition: \"bottom-left\",\n\t\t\t\tautoClose: 5000,\n\t\t\t\thideProgressBar: false,\n\t\t\t\tcloseOnClick: true,\n\t\t\t\tpauseOnHover: true,\n\t\t\t\tdraggable: true,\n\t\t\t\tprogress: undefined,\n\t\t\t});\n\t\t\t// alert(\"Error: \", e);\n\t\t\thandleClose();\n\t\t}\n\t};\n\n\tconst unstakeApi = async (walletKey, nftKey) => {\n\t\taxios\n\t\t\t.delete(`${baseURL}/unstake/${nftKey}`, {\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\",\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(\"Response: \", response);\n\t\t\t\tcheckNFTs();\n\t\t\t\tgetStakeData(walletKey);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(\"Error:\", err);\n\t\t\t});\n\t};\n\n\tconst getStakeData = async (walletKey) => {\n\t\taxios\n\t\t\t.get(`${baseURL}/stakeData/${walletKey.toString()}`, {\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\",\n\t\t\t\t},\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tsetStakedNft(response.data);\n\t\t\t\tconsole.log(\" getStakeData Response: \", response.data);\n\t\t\t\tsetLoader(false);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(\"Error:\", err);\n\t\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (publicKey) {\n\t\t\tconsole.log(\"Check\");\n\t\t\tgetStakeData(publicKey.toString());\n\t\t\tsetImageLoader(true);\n\n\t\t}\n\t}, [publicKey]);\n\n\t// useEffect(() => {\n\t//   if (publicKey) {\n\t//     console.log(\"Check\");\n\t//     checkNFTs();\n\t//     getStakeData(publicKey.toString());\n\t//   }\n\t// }, [loader]);\n\n\tconst unstake = async (nft, publicKey, sendTransaction) => {\n\t\tsetLoader(true);\n\t\thandleShow();\n\t\tconsole.log(\"Check\");\n\t\tif (!publicKey) throw new WalletNotConnectedError();\n\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"ECoegv7FCc7yjCJ131PN3vFUbz1eJ5UdHS3RLNtvL8vz\"\n\t\t// );\n\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"E8iVZ3venXrXUqTXQSEwKGbE2hX5tAWBmKDoMKo3Y4i1\"\n\t\t// );\n\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"4ayF4YuQMVTCavci2w7ZvK51ZmbVz6vKPWKqJ1DSiQkB\"\n\t\t// );\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"3wVscJPJ59dbpmCzkvNEXuYc8EX6hXsQXkBeeTk1sebY\"\n\t\t// );\n\t\tlet program_id = new web3.PublicKey(\n\t\t\t\"4hWcRRDdVEFmCLsum7ByxckX1LqgNF1AsU1MLaac9qxN\"\n\t\t);\n\t\t// mainnet\n\t\t// let program_id = new web3.PublicKey(\n\t\t// \t\"Bh27em4eRG9GHmvigC6PZ6S1wM7vWRS7JGvP2Zk7pLsF\"\n\t\t// );\n\t\t\n\n\t\tlet nftPubkey = new web3.PublicKey(nft);\n\t\t// console.log(\"nftPubkey: \", nftPubkey);\n\n\t\tlet rent = new web3.PublicKey(\n\t\t\t\"SysvarRent111111111111111111111111111111111\"\n\t\t);\n\n\t\tlet TOKEN_PROGRAM_ID = new web3.PublicKey(\n\t\t\t\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n\t\t);\n\n\t\tlet SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n\t\t\t\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n\t\t);\n\n\t\tconst TOKEN_METADATA_PROGRAM = new web3.PublicKey(\n\t\t\t\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n\t\t); // Added new\n\t\tconst CANDY_MACHINE_V2_PROGRAM = new web3.PublicKey(\n\t\t\t\"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n\t\t); //Added new\n\n\t\t// const CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t// \t\"5dRqRddNxD3tTuuRVVaSWYCErJHSvtZNnm2qtoGxwkYq\"\n\t\t// );\n\n\t\t// const CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t// \t\"5k2EPeEp4ZZaRKdW7uDvTxwoRgYkatk15LEhRPYXhaxD\"\n\t\t// );\n\t\tconst CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t\t\"2YjQta5fdwFushuo6KLsjcYABqoyt22UYe4btRWPUhWW\"\n\t\t);\n\t\t// mainnet\n\t\t// const CANDY_MACHINE_ID = new web3.PublicKey(\n\t\t// \t\"2eSLBEzyJpPVUkBHCQeodFZtRPE9S6tRrAXhGnmxNM48\"\n\t\t// );\n\t\t\n\n\t\tlet connection = new web3.Connection(\n\t\t\tweb3.clusterApiUrl(\"devnet\"),\n\t\t\t// web3.clusterApiUrl(\"mainnet-beta\"),\n\t\t\t\"confirmed\"\n\t\t);\n\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"D2D6M8p5TGe2PphL7VacmVwbTGNyr22GAZ4qcqTFVn46\"\n\t\t// );\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"9SWHSxRbexQDjNgCgh5GEeyESv2vCAWo2sZf45xHr18h\"\n\t\t// );\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"C44md6V2ixneLTfnZMcNnFrYL3oFhgVhmjTCc1dwyzf7\"\n\t\t// );\n\t\tlet reward_mint = new web3.PublicKey(\n\t\t\t\"EdiXRce7Fsu4WDAMkTdntUQodf3qqEnwDUbvVW6FQAEM\"\n\t\t);\n\t\t//mainnet\n\t\t// let reward_mint = new web3.PublicKey(\n\t\t// \t\"7eDhcd5zo6Dg3LAdezLvGMYE9xHWTzr2ayKzAhQp8DHy\"\n\t\t// );\n\t\t\n\t\t// var metadata_enc = new TextEncoder().encode(\"metadata\"); //Added new\n\t\tlet metadata = await web3.PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(\"metadata\"),\n\t\t\t\tTOKEN_METADATA_PROGRAM.toBuffer(),\n\t\t\t\tnftPubkey.toBuffer(),\n\t\t\t],\n\t\t\tTOKEN_METADATA_PROGRAM\n\t\t); //Added new\n\t\tmetadata = metadata[0];\n\t\t// let metadata_data = await connection.getAccountInfo(metadata);\n\n\t\tvar vault_enc = new TextEncoder().encode(\"vault\");\n\t\tlet vault_pda = await web3.PublicKey.findProgramAddress(\n\t\t\t[vault_enc],\n\t\t\tprogram_id\n\t\t);\n\t\t// console.log(\"vault_pda: \", vault_pda);\n\t\tvault_pda = vault_pda[0]; //IMPORTANT\n\t\tlet raw_stake_data = await web3.PublicKey.findProgramAddress(\n\t\t\t[nftPubkey.toBuffer()],\n\t\t\tprogram_id\n\t\t);\n\t\t// console.log(\"raw_stake_data: \", raw_stake_data.toString());\n\t\tlet stake_data = raw_stake_data[0];\n\n\t\tlet destanation = (\n\t\t\tawait web3.PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tpublicKey.toBuffer(),\n\t\t\t\t\tTOKEN_PROGRAM_ID.toBuffer(),\n\t\t\t\t\tnftPubkey.toBuffer(),\n\t\t\t\t],\n\t\t\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t\t\t)\n\t\t)[0]; //Done\n\t\tlet reward_source = (\n\t\t\tawait web3.PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tvault_pda.toBuffer(),\n\t\t\t\t\tTOKEN_PROGRAM_ID.toBuffer(),\n\t\t\t\t\treward_mint.toBuffer(),\n\t\t\t\t],\n\t\t\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t\t\t)\n\t\t)[0]; //Done\n\t\tlet source = (\n\t\t\tawait web3.PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tvault_pda.toBuffer(),\n\t\t\t\t\tTOKEN_PROGRAM_ID.toBuffer(),\n\t\t\t\t\tnftPubkey.toBuffer(),\n\t\t\t\t],\n\t\t\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t\t\t)\n\t\t)[0]; //Done\n\n\t\tlet reward_destanation = (\n\t\t\tawait web3.PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tpublicKey.toBuffer(),\n\t\t\t\t\tTOKEN_PROGRAM_ID.toBuffer(),\n\t\t\t\t\treward_mint.toBuffer(),\n\t\t\t\t],\n\t\t\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t\t\t)\n\t\t)[0]; //Done\n\t\tlet metadataPDA = await Metadata.getPDA(new web3.PublicKey(nftPubkey));\n\t\tlet tokenMetadata = await Metadata.load(connection, metadataPDA);\n\t\t// console.log(\"tokenMetadata\", tokenMetadata);\n\n\t\tlet wl_data_address = await web3.PublicKey.findProgramAddress(\n\t\t\t[Buffer.from(\"whitelist\"), CANDY_MACHINE_ID.toBuffer()],\n\t\t\tprogram_id\n\t\t);\n\t\twl_data_address = wl_data_address[0];\n\t\t// console.log(\"Publickey: \", publicKey.toString());\n\t\t// console.log(\n\t\t// \t\"web3.SystemProgram.programId: \",\n\t\t// \tweb3.SystemProgram.programId.toString()\n\t\t// );\n\t\t// console.log(\"NFTpubkey: \", nftPubkey.toString());\n\t\t// console.log(\n\t\t// \t\"SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: \",\n\t\t// \tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID.toString()\n\t\t// );\n\t\t// console.log(\"stake_data: \", stake_data.toString());\n\t\t// console.log(\"vault_pda: \", vault_pda.toString());\n\t\t// console.log(\"reward_destanation: \", reward_destanation.toString());\n\t\t// console.log(\"reward_source: \", reward_source.toString());\n\t\t// console.log(\"destanation: \", destanation.toString());\n\t\t// console.log(\"source: \", source.toString());\n\t\t// console.log(\"Metadata: \", metadata.toString());\n\t\t// console.log(\"wl_data_address: \", wl_data_address.toString());\n\t\t// console.log(\"reward_mint: \", reward_mint.toString());\n\n\t\tlet keys = [\n\t\t\t{ pubkey: publicKey, isSigner: true, isWritable: true }, //Done\n\t\t\t{\n\t\t\t\tpubkey: web3.SystemProgram.programId,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t}, //Done\n\t\t\t{ pubkey: nftPubkey, isSigner: false, isWritable: false }, //Done\n\t\t\t{ pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }, //Done\n\t\t\t{ pubkey: rent, isSigner: false, isWritable: false }, //Done\n\t\t\t{\n\t\t\t\tpubkey: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t}, //Done\n\t\t\t{ pubkey: stake_data, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: vault_pda, isSigner: false, isWritable: false }, //Done\n\t\t\t{ pubkey: reward_destanation, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: reward_source, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: destanation, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: source, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: metadata, isSigner: false, isWritable: false }, //Done\n\t\t\t{ pubkey: wl_data_address, isSigner: false, isWritable: true }, //Done\n\t\t\t{ pubkey: reward_mint, isSigner: false, isWritable: false }, //Done\n\t\t];\n\n\t\tlet allocateTransaction = new Transaction({\n\t\t\tfeePayer: publicKey,\n\t\t});\n\n\t\tconst commandDataLayout = struct([\n\t\t\tu8(\"instruction\"),\n\t\t\tnu64(\"nft\"),\n\t\t\t// nu64(\"lock_period\"),\n\t\t]);\n\n\t\tlet data = Buffer.alloc(1024);\n\t\t{\n\t\t\tconst encodeLength = commandDataLayout.encode(\n\t\t\t\t{\n\t\t\t\t\tinstruction: 2,\n\t\t\t\t\tnftPubkey,\n\t\t\t\t\t// lock_period,\n\t\t\t\t},\n\t\t\t\tdata\n\t\t\t);\n\t\t\tdata = data.slice(0, encodeLength);\n\t\t}\n\n\t\tallocateTransaction.add(\n\t\t\tnew web3.TransactionInstruction({\n\t\t\t\tkeys,\n\t\t\t\tprogramId: program_id,\n\t\t\t\tdata,\n\t\t\t})\n\t\t);\n\n\t\ttry {\n\t\t\tconst signature = await sendTransaction(allocateTransaction, connection);\n\n\t\t\tconst result = await connection.confirmTransaction(\n\t\t\t\tsignature,\n\t\t\t\t\"processed\"\n\t\t\t);\n\t\t\tif (result.value.err) {\n\t\t\t\tsetLoader(false);\n\t\t\t\tconsole.log(\"STAKING\", result.value.err);\n\t\t\t\ttoast.error(`Error! ${result.value.err}`, {\n\t\t\t\t\tposition: \"bottom-left\",\n\t\t\t\t\tautoClose: 5000,\n\t\t\t\t\thideProgressBar: false,\n\t\t\t\t\tcloseOnClick: true,\n\t\t\t\t\tpauseOnHover: true,\n\t\t\t\t\tdraggable: true,\n\t\t\t\t\tprogress: undefined,\n\t\t\t\t});\n\t\t\t\thandleClose();\n\n\t\t\t} else {\n\t\t\t\tunstakeApi(publicKey.toString(), nft);\n\t\t\t\tsetLoader(false);\n\t\t\t\tconsole.log(\"transaction confirmed STAKING\", signature);\n\t\t\t\ttoast.success(\"Success! Untaked Successfully.\", {\n\t\t\t\t\tposition: \"bottom-left\",\n\t\t\t\t\tautoClose: 5000,\n\t\t\t\t\thideProgressBar: false,\n\t\t\t\t\tcloseOnClick: true,\n\t\t\t\t\tpauseOnHover: true,\n\t\t\t\t\tdraggable: true,\n\t\t\t\t\tprogress: undefined,\n\t\t\t\t});\n\t\t\t\thandleClose();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetLoader(false);\n\t\t\tconsole.log(\"error STAKING:\", e);\n\t\t\ttoast.error(`Error! ${e}`, {\n\t\t\t\tposition: \"bottom-left\",\n\t\t\t\tautoClose: 5000,\n\t\t\t\thideProgressBar: false,\n\t\t\t\tcloseOnClick: true,\n\t\t\t\tpauseOnHover: true,\n\t\t\t\tdraggable: true,\n\t\t\t\tprogress: undefined,\n\t\t\t});\n\t\t\t// alert(\"Error: \", e);\n\t\t\thandleClose();\n\t\t}\n\t};\n// const [timer,setTimer]=useState();\n// \tsetInterval(()=>{\n// \t\tsetTimer(moment().format('LTS'));\n// \t},5000)\n\n// let time = new Date().toLocaleString();\n// const [cTime, setTime] = useState(time);\n// useEffect(() => {\n//   setInterval(() => {\n// \tsetTime(time);\n//   }, 1000);\n// },[time]);\n\n// const [prize,setPrize]=useState();\n\n\n// const calculate=(createdAt)=>{\n// \tconsole.log(\"createdAt\", createdAt.toString());\n// \tlet\tcreatedAt_sec=moment(createdAt.toString()).unix();\n// \tlet timeInSec=moment(new Date().toISOString()).unix();\n// \tvar stack_sec=timeInSec-createdAt_sec;\n// \tsetInterval(()=>{\n\n// \t\t stack_sec=stack_sec+1;\n// \t\tsetPrize(stack_sec*0.0001);\n// \t\t},1000)\n\n// \tconsole.log(stack_sec,\"stack_sec\")\n\t\n// \tconsole.log(createdAt_sec,\"createdAt_sec\")\n// \tconsole.log(timeInSec,\"timeInSec\")\n// }\n\nconst handleLoading=()=>{\n\tconsole.log(\"image is loaded\")\n\tsetImageLoader(false);\n\n\t\t// setLoader2(false);\n\n  }\n  const handleLoading2=()=>{\n\tconsole.log(\"image is loaded\")\n\tsetImageLoader2(false);\n\t// setLoader2(false);\n  \n  }\n\n\tconst [show, setShow] = useState(false);\n\tconst handleClose = () => {\n\t\tsetShow(false);\n\t};\n\tconst handleShow = () => {\n\t\tconsole.log(\"handle show called\");\n    // setSelectedObj(obj);\n\t\tsetShow(true);\n\t};\n\treturn (\n\t\t<>\n\t\t   <Modal1\n\t\t\t\t\t\t\t\t\tshow={show}\n\t\t\t\t\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\t\t\t\t\tstring=\"from 1\"\n                //   selectedObj={selectedObj}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t/>\n\t\t\t<div style={{ justifyContent: \"center\", display: \"flex\" }}>\n\t\t\t\t{/* <Button onClick={checkNFTs} >\n            Get NFTs\n        </Button> */}\n\t\t\t</div>\n\n\t\t\t{/* <Container className=\"mt-5\">\n<Row>\n  {publicKey ? (\n     <Col sm={12} md={6} lg={6}>\n     <h4 className='lower-content'>Robot in the Dojo</h4>\n     <h4 className='lower-content' style={{color:\"white\",marginTop:\"60px\"}}>Robot in the Walllet</h4>\n     </Col>\n  ):(null)\n   \n    \n}   \n</Row>\n     </Container> */}\n\t\t\t{/* <div style={{color:\"white\"}}>\n        {images.length > 0 ? images.map((obj, i) => (<div><h3 key={i} >{obj.name}</h3><img src={obj.src} width={100} /></div>)): message}\n        </div>  */}\n\t\t\t<Container className=\"flex-container mt-5 \" style={{ display: \"flex\" }}>\n\t\t\t\t<Row>\n\t\t\t\t\t{publicKey && stakedNft?.length > 0 && (\n\t\t\t\t\t\t<h4 className=\"lower-content\">Scared Amulets on Staked</h4>\n\t\t\t\t\t)}\n\t\t\t\t\t{console.log(stakedNft, \"error loading staked nft2\")}\n\t\t\t\t\t{console.log(images, \"error loading images nft  && images?.length > 0\")}\n\t\t\t\t\t{publicKey && stakedNft?.length > 0 \n\t\t\t\t\t\t? stakedNft?.map((obj, i) => ( \n\t\t\t\t\t\t\t\t<Col\n\t\t\t\t\t\t\t\t\txs={12}\n\t\t\t\t\t\t\t\t\tsm={12}\n\t\t\t\t\t\t\t\t\tmd={4}\n\t\t\t\t\t\t\t\t\tlg={4}\n\t\t\t\t\t\t\t\t\txl={4}\n\t\t\t\t\t\t\t\t\tstyle={{ paddingRight: \"30px\", marginBottom:\"25px\" }}>\n\t\t\t\t\t\t\t\t\t\t{imgLoader &&\n\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tjustifyContent: \"left\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t// alignContent: \"center\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Spinner animation=\"border\" variant=\"light\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\t\tstyle={{ height: \"auto\", width: \"200px\" }}\n\t\t\t\t\t\t\t\t\t\tsrc={obj.url}\n\t\t\t\t\t\t\t\t\t\tonLoad={()=>handleLoading()}\n\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 lower-content\"\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: \"white\" }}>\n\t\t\t\t\t\t\t\t\t\t{obj.name}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t{/* <p\n\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3 lower-content\"\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: \"white\" }}> */}\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t{/* {calculate(obj.createdAt)} */}\n\n\t\t\t\t\t\t\t\t\t{/* <Calculation createdAt={obj.createdAt}/>\t */}\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <b>Cumulative:</b>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t{prize && prize.toFixed(4)}$ROBO */}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t{/* </p> */}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t{/* <Button  onClick={async () => {\n                                // move();\n\t\t\t\t\t\t\t\t\t\t\t\tawait stake(obj.mint, publicKey, sendTransaction, obj.src);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tdisabled={!publicKey || !obj.mint} variant=\"danger\" style={{width:\"200px\",borderRadius:\"5px\", marginBottom: \"5px\"}}>Stake</Button>\n                      <br />\n                       <Button  variant=\"danger\" style={{width:\"200px\",borderRadius:\"5px\", marginBottom: \"5px\"}}>Stake</Button> */}\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\t\t// move();\n\t\t\t\t\t\t\t\t\t\t\tawait unstake(obj.nftAddress, publicKey, sendTransaction);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tdisabled={!publicKey || !obj.nftAddress}\n\t\t\t\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\twidth: \"200px\",\n\t\t\t\t\t\t\t\t\t\t\tborderRadius: \"5px\",\n\t\t\t\t\t\t\t\t\t\t\tmarginBottom: \"5px\",\n\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\tUNSTAKE\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: null}\n\t\t\t\t\t{/* {publicKey && images.length > 0 ? (\n\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\tclassName=\"lower-content\"\n\t\t\t\t\t\t\tstyle={{ color: \"white\", marginTop: \"60px\" }}>\n\t\t\t\t\t\t\tMonkey's in the Wallet\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\tclassName=\"lower-content\"\n\t\t\t\t\t\t\tstyle={{ color: \"white\", marginTop: \"60px\" }}>\n\t\t\t\t\t\t\tNo Monkey in the Wallet\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t)} */}\n\t\t\t\t\t\t{publicKey && images.length > 0 ? (\n\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\tclassName=\"lower-content mb-3\"\n\t\t\t\t\t\t\tstyle={{ marginTop: \"60px\" }}>\n\t\t\t\t\t\t\tScared Amulets in Wallet\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t{!publicKey ? (<h4\n\t\t\t\t\t\t\tclassName=\"lower-content\"\n\t\t\t\t\t\t\tstyle={{  marginTop: \"60px\" }}>\n\t\t\t\t\t\t\t Connect Wallet\n\t\t\t\t\t\t</h4>):(\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{ images.length > 0 ? (\n\t\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\tclassName=\"lower-content\"\n\t\t\t\t\t\t\tstyle={{  marginTop: \"60px\" }}>\n\t\t\t\t\t\t\tChecking Scared Amulets in Wallet\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t):(\n\t\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\tclassName=\"lower-content\"\n\t\t\t\t\t\t\tstyle={{  marginTop: \"60px\" }}>\n\t\t\t\t\t\t\tNo Scared Amulets in Wallet\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t) }\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{publicKey && images.length > 0 ? (\n\t\t\t\t\t\timages.map((obj, i) => (\n\t\t\t\t\t\t\t<Col\n\t\t\t\t\t\t\t\txs={12}\n\t\t\t\t\t\t\t\tsm={12}\n\t\t\t\t\t\t\t\tmd={4}\n\t\t\t\t\t\t\t\tlg={4}\n\t\t\t\t\t\t\t\txl={4}\n\t\t\t\t\t\t\t\tstyle={{ paddingRight: \"30px\", marginBottom:\"25px\" }}>\n\t\t\t\t\t\t\t\t {imgLoader2 &&\n              <div\n                style={{\n                  alignItems: \"center\",\n                  display: \"flex\",\n                  justifyContent: \"left\",\n                  // alignContent: \"center\",\n                }}\n              >\n                <Spinner animation=\"border\" variant=\"light\" />\n              </div>\n              }\n\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\tstyle={{ height: \"auto\", width: \"200px\" }}\n\t\t\t\t\t\t\t\t\tsrc={obj.src}\n\t\t\t\t\t\t\t\t\tonLoad={()=>handleLoading2()}\n\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\tclassName=\"mt-3 lower-content\"\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tstyle={{ color: \"white\" }}>\n\t\t\t\t\t\t\t\t\t{obj.name}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\t// move();\n\t\t\t\t\t\t\t\t\t\tawait stake(\n\t\t\t\t\t\t\t\t\t\t\tobj.mint,\n\t\t\t\t\t\t\t\t\t\t\tpublicKey,\n\t\t\t\t\t\t\t\t\t\t\tsendTransaction,\n\t\t\t\t\t\t\t\t\t\t\tobj.src,\n\t\t\t\t\t\t\t\t\t\t\tobj.name\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tdisabled={!publicKey || !obj.mint}\n\t\t\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\twidth: \"200px\",\n\t\t\t\t\t\t\t\t\t\tborderRadius: \"5px\",\n\t\t\t\t\t\t\t\t\t\tmarginBottom: \"5px\",\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\tSTAKE\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t{/* <Button  variant=\"danger\" style={{width:\"200px\",borderRadius:\"5px\", marginBottom: \"5px\"}}>Stake</Button> */}\n\t\t\t\t\t\t\t\t{/* <Button  onClick={async () => {\n                                // move();\n\t\t\t\t\t\t\t\t\t\t\t\tawait unstake(obj.mint, publicKey, sendTransaction);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tdisabled={!publicKey || !obj.mint} variant=\"danger\" style={{width:\"200px\",borderRadius:\"5px\", marginBottom: \"5px\"}}>Un_Stake</Button> */}\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t))\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p className=\"mt-3 lower-content\" style={{ color: \"white\" }}>\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t{message}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</>\n\t);\n};\n","import React,{useState, useEffect} from 'react'\nimport {\n\tCol,\n    Image,\n\tModal,\n    Button,\n\tForm,\n\tCard,\n\tSpinner\n} from \"react-bootstrap\";\n\nfunction Modal1(props) {\n\tconsole.log(props,\"props\");\n\t\n  return (\n    <>\n   \n\n    <Modal\n      show={props.show}\n        onHide={ ()=>{props.handleClose()}}\n      dialogClassName=\"modal-90w \"\n      aria-labelledby=\"example-custom-modal-styling-title\"\n\t  centered\n    >\n      \n      <Modal.Body style={{backgroundColor:\"black\", display: \"flex\"}} >\n\n\t  <div\n                style={{\n                  alignItems: \"center\",\n                  display: \"flex\",\n                  justifyContent: \"left\",\n                  // alignContent: \"center\",\n                }}\n              >\n                <Spinner animation=\"border\" variant=\"light\" />\n\t\t\t\t<span className=\"text-light\">Proccessing Transaction...</span>\n              </div>\n\n\n      </Modal.Body>\n\t  {/* <Modal.Footer  style={{backgroundColor:\"black\"}}>\n        <Button onClick={ ()=>{props.handleClose()}}>Close</Button>\n      </Modal.Footer> */}\n    </Modal>\n  </>\n  )\n}\n\nexport default Modal1;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/background1.c1392674.png\";","/** @format */\n\nimport React, { FC, useMemo } from \"react\";\nimport {\n\tConnectionProvider,\n\tWalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n\tgetLedgerWallet,\n\tgetPhantomWallet,\n\tgetSlopeWallet,\n\tgetSolflareWallet,\n\tgetSolletExtensionWallet,\n\tgetSolletWallet,\n\tgetTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport {\n\tWalletModalProvider,\n\tWalletDisconnectButton,\n\tWalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { GetNft } from \"./GetNft\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport RobotClub from \"../src/components/RobotClub\";\n// Default styles that can be overridden by your app\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\nexport const PhantomWallet = () => {\n\t// Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n\tconst network = WalletAdapterNetwork.Devnet;\n\n\tconst handleClick = () => {\n\t\ttoast.warning(\"Disconnected\", {\n\t\t\tposition: \"bottom-left\",\n\t\t\tautoClose: 5000,\n\t\t\thideProgressBar: false,\n\t\t\tcloseOnClick: true,\n\t\t\tpauseOnHover: true,\n\t\t\tdraggable: true,\n\t\t\tprogress: undefined,\n\t\t});\n\t\t// window.location.reload(false);\n\t};\n\t// You can also provide a custom RPC endpoint\n\tconst endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n\t// @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n\t// Only the wallets you configure here will be compiled into your application\n\tconst wallets = useMemo(\n\t\t() => [\n\t\t\tgetPhantomWallet(),\n\t\t\tgetSlopeWallet(),\n\t\t\tgetSolflareWallet(),\n\t\t\tgetTorusWallet({\n\t\t\t\toptions: { clientId: \"Get a client ID @ https://developer.tor.us\" },\n\t\t\t}),\n\t\t\tgetLedgerWallet(),\n\t\t\tgetSolletWallet({ network }),\n\t\t\tgetSolletExtensionWallet({ network }),\n\t\t],\n\t\t[network]\n\t);\n\n\tconsole.log(wallets, \"wallets\");\n\n\treturn (\n\t\t<ConnectionProvider endpoint={endpoint}>\n\t\t\t<WalletProvider wallets={wallets} autoConnect>\n\t\t\t\t<WalletModalProvider>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: \"50%\",\n\t\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\t\tmargin: \"auto\",\n\t\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\t\tmarginBottom: \"20px\",\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<WalletMultiButton\n\t\t\t\t\t\t\tstyle={{ fontSize: 15, lineHeight:\"15px\", backgroundColor: \"red\" }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<WalletDisconnectButton\n\t\t\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tfontSize: 15,\n\t\t\t\t\t\t\t\tlineHeight:\"15px\",\n\t\t\t\t\t\t\t\tbackgroundColor: \"red\",\n\t\t\t\t\t\t\t\tmarginLeft: \"5px\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\n\n\t{/* <RobotClub /> */}\n\t\t\t\t\t<GetNft />\n\t\t\t\t</WalletModalProvider>\n\t\t\t</WalletProvider>\n\t\t</ConnectionProvider>\n\t);\n};\n","export default __webpack_public_path__ + \"static/media/degen.6621ee5d.png\";","/** @format */\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { PhantomWallet } from \"./PhantomWallet\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport degen from \"./images/degen.png\";\nimport RobotClub from \"./components/RobotClub\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"mt-5 mb-5\">\n\t\t\t<ToastContainer\n\t\t\t\tposition=\"bottom-left\"\n\t\t\t\tautoClose={5000}\n\t\t\t\thideProgressBar={false}\n\t\t\t\tnewestOnTop={false}\n\t\t\t\tcloseOnClick\n\t\t\t\trtl={false}\n\t\t\t\tpauseOnFocusLoss\n\t\t\t\tdraggable\n\t\t\t\ttheme={\"dark\"}\n\t\t\t\tpauseOnHover\n\t\t\t/>\n\t\t\t{/* <RobotClub /> */}\n\t\t\t{/* <div style={{marginLeft:\"20px\", width:\"50px\"}} >\n\t\t <a  \n\t\t href=\"#\" \n\t\t className=\"link-dark\">\n<div   className=\"btn-success btn-circle btn-lg\">\n\t\t <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-return-left\" viewBox=\"0 0 16 16\">\n  <path fill-rule=\"evenodd\" d=\"M14.5 1.5a.5.5 0 0 1 .5.5v4.8a2.5 2.5 0 0 1-2.5 2.5H2.707l3.347 3.346a.5.5 0 0 1-.708.708l-4.2-4.2a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 8.3H12.5A1.5 1.5 0 0 0 14 6.8V2a.5.5 0 0 1 .5-.5z\"/>\n</svg>\n</div>\n</a>\n\t\t</div> */}\n\t\t\t<div className=\"mt-5\"\n\t\t\t\tstyle={{ textAlign: \"center\", marginTop: \"40px\" }}>\n\t\t\t<h2\n\t\t\t\t\tclassName=\"first-heading \"\n\t\t\t\t\tstyle={{ color: \"white\", fontSize: \"50px\" }}>\n\t\t\t\t\t\tWelcome to the Scared Amulets Tcg Staking!\t\t\t\t\n\t\t\t\t\t\t</h2>\n\t\t\t\t{/* <img style={{height:\"auto\",width:\"30%\", marginBottom:\"10px\"}} src={degen} /> */}\n\t\t\t\t</div>\n\t\t\t\t<div style={{width:\"50%\", margin:\"auto\"}}>       \n   <ul style={{ textAlign: \"left\", marginTop: \"10px\" }}>\n        <li\tstyle={{ color: \"white\", fontSize: \"18px\" }}>\n\t\t30 SA Coins a day for Common NFTS \n\t\t\t\t</li>\n         <li\tstyle={{ color: \"white\", fontSize: \"18px\" }}>\n\t\t 40 SA Coins for Uncommon NFTS a day \n\t\t\t\t</li> \n        <li\tstyle={{ color: \"white\", fontSize: \"18px\" }}>\n\t\t50 SA Coins for Rare NFTS a day\n      </li>\n\t  <li\tstyle={{ color: \"white\", fontSize: \"18px\" }}>\n\t  60 SA Coins for Epic NFTS a day\n      </li>\n\t  <li\tstyle={{ color: \"white\", fontSize: \"18px\" }}>\n\t  80 SA Coins for Legendary NFTS a day\n      </li>\n\t  <li\tstyle={{ color: \"white\", fontSize: \"18px\" }}>\n\t  100 SA Coins for Mythic NFTS a day\n      </li>\n\t  \n\t\t\n\t \n      </ul>\n    </div>\n\n\t\t\t\n\t\t\t<PhantomWallet />\n\t\t\n\t\t</div>\n\t);\n}\n\nexport default App;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}